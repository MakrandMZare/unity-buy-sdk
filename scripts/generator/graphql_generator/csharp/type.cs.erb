<% isRoot = schema.root_name?(type.name) %>
<% isQueryRoot = type.name == schema.query_root_name %>
using System;
using System.Text;
using System.Collections.Generic;

namespace <%= schema_name %> {   
    <% case type.kind when 'OBJECT', 'INTERFACE', 'UNION' %>
        /* This is a regular object */

        <%# the following will define a delegate for lamdas. Each delegate name will be followed by Delegate. eg. ShopDelegate %>
        public delegate void <%= type.classify_name %>Delegate(<%= type.classify_name %>Query query);

        <%# the following will start defining the class. Each type name will be followed by Query. eg. ShopQuery %>
        public class <%= type.classify_name %>Query : QueryBase {
            <%# create the constuctor %>
            <% if isRoot then %>
                public <%= type.classify_name %>Query() {
                    this.query = new StringBuilder("<%= "mutation" unless isQueryRoot %>{");
                }
            <% else %>
                public <%= type.classify_name %>Query(StringBuilder query) {
                    this.query = query;
                }
            <% end %>

            <%# now create methods to add fields to queries %>
            <% type.fields.each do |field| %>
                <%
                    # we want to setup arguments for queries here
                    args = ""
                    hasArgs = false

                    # if this field is an Object we'll need to add in delegates
                    if field.type.subfields?
                        args = "#{args}#{field.type.unwrap.classify_name}Delegate addTo";
                        hasArgs = true
                    end

                    # now we want to setup required args if there are any
                    field.required_args.each do |arg|
                        args = "#{args}#{get_arg_type_and_name(hasArgs, arg)}"
                        hasArgs = true
                    end

                    # now handle optional args
                    field.optional_args.each do |arg|
                        args = "#{args}#{get_arg_type_and_name(hasArgs, arg, true)}"
                        hasArgs = true
                    end
                %>

                public <%= type.classify_name %>Query <%= escape_reserved_word(field.name) %>(<%= args %>) {
                    StartField("<%= field.name %>");

                    <%# now we we want to handle generating arguments %>
                    <% if field.args.any? %>
                        Arguments args = new Arguments();

                        <%# handle adding required args to the args generator %>
                        <% field.required_args.each do |arg| %>
                            args.Add("<%= arg.name %>", <%= escape_reserved_word(arg.name) %>);
                        <% end %>
                        
                        <% field.optional_args.each do |arg| %>
                            if (<%= escape_reserved_word(arg.name) %> != null) {
                                args.Add("<%= arg.name %>", <%= escape_reserved_word(arg.name) %>);
                            }
                        <% end %>

                        query.Append(args.ToString());
                    <% end %>


                    <%# if this field is an OBJECT we want to be able to query subfields %>
                    <% if field.type.subfields? %>
                        query.Append("{");
                        addTo(new <%= field.type.unwrap.classify_name %>Query(query));
                        query.Append("}");
                    <% end %>

                    return this;
                }
            <% end %>

            <%# if this is the root we want to add in a ToString method %>
            <% if isRoot then %>
                public override string ToString() {
                query.Append("}");

                return query.ToString();
                }
            <% end %>
        }
    <% when 'INPUT_OBJECT' %>
        /* This is an input object */
        public class <%= type.classify_name %>Input : InputBase {
            <%
                # we want to setup arguments for queries here
                args = ""
                hasArgs = false

                # now we want to setup required args if there are any
                type.required_input_fields.each do |field|
                    args = "#{args}#{get_arg_type_and_name(hasArgs, field)}"
                    hasArgs = true
                end

                # now handle optional args
                type.optional_input_fields.each do |field|
                    args = "#{args}#{get_arg_type_and_name(hasArgs, field, true)}"
                    hasArgs = true
                end
            %>

            <%# create a constructor for the input type %>
            public <%= type.classify_name %>Input(<%= args %>) {
                <%# handle adding required fields %>
                <% type.required_input_fields.each do |field| %>
                    Add("<%= field.name %>", <%= escape_reserved_word(field.name) %>);
                <% end %>
                
                <%# handle adding optional fields %>
                <% type.optional_input_fields.each do |field| %>
                    if (<%= escape_reserved_word(field.name) %> != null) {
                        Add("<%= field.name %>", <%= escape_reserved_word(field.name) %>);
                    }
                <% end %>
            }
        }
    <% when 'ENUM' %>
        public enum <%= type.classify_name %> {
            <%= type.enum_values.map{ |enum| enum.name }.join(", ") %>
        }
    <% end %>
}
